Best practice using AWK
Edit Document
什 么 是 awk?               1
为 什 么 使用 awk?               2
awk 的 调 用方式               2
awk 的 语 法：               2
参数 说 明：               2
awk 的 记录 、字段与内置 变 量：               3
awk 的内置函数               3
在命令行使用 awk               3
awk 的 变 量               3
运算与判断：               4
awk 的流程控制               4
1 、 BEGIN 和 END:               4
2 、流程控制 语 句               4
awk 中的自定 义 函数               5
awk 高 级输 入 输 出               6
1. 读 取下一条 记录 ：               6
2. 简单 地 读 取一条 记录               6
3. 关闭 文件 :               6
4. 输 出到一个文件 :               6
5. 输 出到一个命令               6
awk 与 shell script 混合 编 程               7
1.awk 读 取 Shell script 程序 变 量               7
2. 将 shell 命令的 执 行 结 果送 给 awk 处 理               7
3.shell script 程序 读 awk 的 执 行 结 果               7
4. 在 awk 中 执 行 shell 命令行 ---- 嵌入函数 system()               7
附 录 ：               8
1.awk 的常 规 表达式元字符               8
2.awk 算 术 运算符               8
3.awk 允 许 的 测试 ：               8
4.awk 的操作符 ( 按 优 先 级 升序排列 )               9
5.awk 内置 变 量（ 预 定 义变 量）               9
6.awk 的内置函数               9
awk使用手册
awk使用手册
什 么 是 awk?
你可能 对 UNIX比 较 熟悉，但你可能 对 awk很陌生， 这 一点也不奇怪，的确，与其 优 秀的功能相比， awk 还远 没达到它 应 有的知名度。 awk是什 么 ？与其它大多数 UNIX命令不同的是，从名字上看，我 们 不可能知道 awk的功能：它既不是具有独立意 义 的英文 单词 ，也不是几个相 关单词 的 缩 写。事 实 上， awk是三个人名的 缩 写，他 们 是： Aho、(Peter) Wei nberg和(Brain)Kernighan。正是 这 三个人 创 造了 awk---一个 优 秀的 样 式 扫 描与 处 理工具。
AWK的功能是什 么 ？与 sed和grep很相似，awk是一 种样 式 扫 描与 处 理工具。但其功能却大大 强 于 sed和grep。awk提供了极其 强 大的功能：它几乎可以完成 grep和sed所能完成的全部工作，同 时 ，它 还 可以可以 进 行 样 式装入、流控制、数学运算符、 进 程控制 语 句甚至于内置的 变 量和函数。它具 备 了一个完整的 语 言所 应 具有的几乎所有精美特性。 实际 上， awk的确 拥 有自己的 语 言： awk程序 设计语 言， awk的三位 创 建者已将它正式定 义为 ： 样 式 扫 描和 处 理 语 言。
为 什 么 使用 awk?
即使如此，你也 许 仍然会 问 ，我 为 什 么 要使用 awk?
使用awk的第一个理由是基于文本的 样 式 扫 描和 处 理是我 们经 常做的工作， awk所做的工作有些象数据 库 ，但与数据 库 不同的是，它 处 理的是文本文件， 这 些文件没有 专门 的存 储 格式，普通的人 们 就能 编辑 、 阅读 、理解和 处 理它 们 。而数据 库 文件往往具有特殊的存 储 格式， 这 使得它 们 必 须 用数据 库处 理程序来 处 理它 们 。既然 这种类 似于数据 库 的 处 理工作我 们经 常会遇到，我 们 就 应 当找到 处 理它 们 的 简 便易行的方法， UNIX有很多 这 方面的工具，例如 sed 、grep、sort以及find等等，awk是其中十分 优 秀的一 种 。
使用awk的第二个理由是awk是一个 简单 的工具，当然 这 是相 对 于其 强 大的功能来 说 的。的确， UNIX有 许 多 优 秀的工具，例如 UNIX天然的 开发 工具 C 语 言及其延 续 C++就非常的 优 秀。但相 对 于它 们 来 说 ， awk完成同 样 的功能要方便和 简 捷得多。 这 首先是因 为 awk提供了适 应 多 种 需要的解决方案：从解决 简单问题 的 awk命令行到 复杂 而精巧的 awk程序 设计语 言， 这样 做的好 处 是，你可以不必用 复杂 的方法去解决本来很 简单 的 问题 。例如，你可以用一个命令行解决 简单 的 问题 ，而 C不行，即使一个再 简单 的程序， C 语 言也必 须经过编 写、 编译 的全 过 程。其次， awk本身是解 释执 行的， 这 就使得 awk程序不必 经过编译 的 过 程，同 时 ， 这 也使得它与 shell script程序能 够 很好的契合。最后， awk本身 较 C 语 言 简单 ， 虽 然 awk吸收了C 语 言很多 优 秀的成分，熟悉 C 语 言会 对 学 习 awk有很大的帮助，但awk本身不 须 要会使用 C 语 言 ——一 种 功能 强 大但需要大量 时间 学 习 才能掌握其技巧的 开发 工具。
使用awk的第三个理由是awk是一个容易 获 得的工具。与 C和C++ 语 言不同， awk只有一个文件(/bin/awk)，而且几乎 每 个版本的 UNIX都提供各自版本的awk，你完全不必 费 心去想如何 获 得 awk。但C 语 言却不是 这样 ， 虽 然 C 语 言是 UNIX天然的 开发 工具，但 这 个 开发 工具却是 单 独 发 行的， 换 言之，你必 须为 你的 UNIX版本的C 语 言 开发 工具 单 独付 费 （当然使用 D版者除外）， 获 得并安装它，然后你才可以使用它。
基于以上理由，再加上awk 强 大的功能，我 们 有理由 说 ，如果你要 处 理与文本 样 式 扫 描相 关 的工作， awk 应该 是你的第一 选择 。在 这 里有一个可遵循的一般原 则 ：如果你用普通的 shell工具或shell script有困 难 的 话 ， 试试 awk,如果awk仍不能解决 问题 ， 则 便用 C 语 言，如果 C 语 言仍然失 败 ， 则 移至 C++。
awk的 调 用方式
前面曾 经说过 ， awk提供了适 应 多 种 需要的不同解决方案，它 们 是：
一、awk命令行，你可以象使用普通UNIX命令一 样 使用 awk，在命令行中你也可以使用awk程序 设计语 言， 虽 然 awk支持多行的 录 入，但是 录 入 长长 的命令行并保 证 其正确无 误 却是一件令人 头 疼的事，因此， 这种 方法一般只用于解决 简单 的 问题 。当然，你也可以在 shell script程序中引用awk命令行甚至awk程序脚本。
二、使用-f 选项调 用 awk程序。awk允 许 将一段 awk程序写入一个文本文件，然后在awk命令行中用-f 选项调 用并 执 行 这 段程序。具体的方法我 们 将在后面的 awk 语 法中 讲 到。
三、利用命令解 释 器 调 用 awk程序：利用UNIX支持的命令解 释 器功能，我 们 可以将一段 awk程序写入文本文件，然后在它的第一行加上:
#!/bin/awk -f
并 赋 予 这 个文本文件以 执 行的 权 限。 这样 做之后，你就可以在命令行中用 类 似于下面 这样 的方式 调 用并 执 行 这 段 awk程序了。
$awk脚本文本名 待 处 理文件
awk的 语 法：
与其它UNIX命令一 样 ， awk 拥 有自己的 语 法：
awk [ -F re] [parameter...] ['prog'] [-f progfile][in_file...]
参数 说 明：
-F re:允 许 awk更改其字段分隔符。
parameter: 该 参数帮助 为 不同的 变 量 赋值 。
'prog': awk的程序 语 句段。 这 个 语 句段必 须 用 单 拓号： '和'括起，以防被shell解 释 。 这 个程序 语 句段的 标 准形式 为 ：
'pattern {action}'
其中pattern参数可以是egrep正 则 表达式中的任何一个，它可以使用 语 法 /re/再加上一些 样 式匹配技巧构成。与 sed 类 似，你也可以使用 ","分 开 两 样 式以 选择 某个范 围 。 关 于匹配的 细节 ，你可以参考附 录 ，如果仍不懂的 话 ，找本 UNIX 书 学学 grep和sed（本人是在学 习 ed 时 掌握匹配技 术 的）。 action参数 总 是被大括号包 围 ，它由一系 统 awk 语 句 组 成，各 语 句之 间 用 ";"分隔。awk解 释 它 们 ，并在 pattern 给 定的 样 式匹配的 记录 上 执 行其操作。与 shell 类 似，你也可以使用 “#”作 为 注 释 符，它使 “#”到行尾的内容成 为 注 释 ，在解 释执 行 时 ，它 们 将被忽略。你可以省略 pattern和action之一，但不能两者同 时 省略，当省略 pattern 时 没有 样 式匹配，表示 对 所有行（ 记录 ）均 执 行操作，省略 action 时执 行缺省的操作 ——在 标 准 输 出上 显 示。
-f progfile:允 许 awk 调 用并 执 行 progfile指定有程序文件。progfile是一个文本文件，他必 须 符合 awk的 语 法。
in_file:awk的 输 入文件， awk允 许对 多个 输 入文件 进 行 处 理。 值 得注意的是 awk不修改 输 入文件。如果未指定 输 入文件， awk将接受 标 准 输 入，并将 结 果 显 示在 标 准 输 出上。 awk支持 输 入 输 出重定向。
awk的 记录 、字段与内置 变 量：
前面 说过 ， awk 处 理的工作与数据 库 的 处 理方式有相同之 处 ，其相同 处 之一就是 awk支持 对记录 和字段的 处 理，其中 对 字段的 处 理是 grep和sed不能 实现 的， 这 也是 awk 优 于 二者的原因之一。在awk中，缺省的情况下 总 是将文本文件中的一行 视为 一个 记录 ，而将一行中的某一部分作 为记录 中的一个字段。 为 了操作 这 些不同的字段， awk借用shell的方法，用$1,$2,$3... 这样 的方式来 顺 序地表示行（ 记录 ）中的不同字段。特殊地， awk用$0表示整个行（ 记录 ）。不同的字段之 间 是用称作分隔符的字符分隔 开 的。系 统 默 认 的分隔符是空格。 awk允 许 在命令行中用 -F re的形式来改 变这 个分隔符。事 实 上， awk用一个内置的 变 量 FS来 记忆这 个分隔符。 awk中有好几个 这样 的内置 变 量，例如， 记录 分隔符 变 量 RS、当前工作的 记录 数 NR等等，本文后面的附表列出了全部的内置 变 量。 这 些内置的 变 量可以在 awk程序中引用或修改，例如，你可以利用NR 变 量在模式匹配中指定工作范 围 ，也可以通 过 修改 记录 分隔符 RS 让 一个特殊字符而不是 换 行符作 为记录 的分隔符。
例: 显 示文本文件 myfile中第七行到第十五行中以字符%分隔的第一字段，第三字段和第七字段：
awk -F % 'NR==7,NR==15 {printf $1 $3 $7}'
awk的内置函数
awk之所以成 为 一 种优 秀的程序 设计语 言的原因之一是它吸收了某些 优 秀的程序 设计语 言（例 如C） 语 言的 许 多 优 点。 这 些 优 点之一就是内置函数的使用， awk定 义 并支持了一系列的内置函数，由于 这 些函数的使用，使得 awk提供的功能更 为 完善和 强 大，例如， awk使用了一系列的字符串 处 理内置函数 ( 这 些函数看起来与 C 语 言的字符串 处 理函数相似，其使用方式与 C 语 言中的函数也相差无几 )，正是由于 这 些内置函数的使用，使 awk 处 理字符串的功能更加 强 大。本文后面的附 录 中列有一般的 awk所提供的内置函数， 这 些内置函数也 许 与你的 awk版本有些出入，因此，在使用之前，最好参考一下你的系 统 中的 联 机帮助。
作 为 内置函数的一个例子，我 们 将在 这 里介 绍 awk的printf函数， 这 个函数使得 awk与c 语 言的 输 出相一致。 实际 上， awk中有 许 多引用形式都是从 C 语 言借用 过 来的。如果你熟悉 C 语 言，你也 许 会 记 得其中的 printf函数，它提供的 强 大格式 输 出功能曾 经带 我 们许 多的方便。幸运的是，我 们 在 awk中又和它重逢了。awk中printf几乎与C 语 言中一模一 样 ，如果你熟悉 C 语 言的 话 ，你完全可以照 C 语 言的模式使用 awk中的printf。因此在 这 里，我 们 只 给 出一个例子，如果你不熟悉的 话 ， 请 随便找一本 C 语 言的入 门书 翻翻。
例: 显 示文件 myfile中的行号和第3字段：
$awk '{printf"%03d%s\n",NR,$1}' myfile
在命令行使用awk
按照 顺 序，我 们应 当 讲 解 awk程序 设计 的内容了，但在 讲 解之前，我 们 将用一些例子来 对 前面的知 识进 行回 顾 ， 这 些例子都是在命令行中使用的，由此我 们 可以知道在命令行中使用 awk是多 么 的方便。 这样 做的原因一方面是 为 下面的内容作 铺垫 ，另一方面是介 绍 一些解决 简单问题 的方法，我 们 完全没有必要用 复杂 的方法来解决 简单 的 问题 ----既然awk提供了 较为简单 的方法的 话 。
例： 显 示文本文件 mydoc匹配（含有）字符串"sun"的所有行。
$awk '/sun/{print}' mydoc
由于 显 示整个 记录 （全行）是 awk的缺省 动 作，因此可以省略 action 项 。
$awk '/sun/' mydoc
例：下面是一个 较为复杂 的匹配的示例：
$awk '/[Ss]un/,/[Mm]oon/ {print}' myfile
它将 显 示第一个匹配 Sun或sun的行与第一个匹配Moon或moon的行之 间 的行，并 显 示到 标 准 输 出上。
例：下面的示例 显 示了内置 变 量和内置函数 length（）的使用：
$awk 'length($0)>80 {print NR}' myfile
该 命令行将 显 示文本 myfile中所有超 过 80个字符的行号，在 这 里，用 $0表示整个 记录 （行），同 时 ，内置 变 量 NR不使用 标 志符 '$'。
例：作 为 一个 较为实际 的例子，我 们 假 设 要 对 UNIX中的用 户进 行安全性 检查 ，方法是考察 /etc下的passwd文件， 检查 其中的 passwd字段（第二字段）是否 为 "*"，如不 为 "*"， 则 表示 该 用 户 没有 设 置密 码 ， 显 示出 这 些用 户 名（第一字段）。我 们 可以用如下 语 句 实现 ：
#awk -F: '$2=="" {printf("%s no password!\n",$1' /etc/passwd
在 这 个示例中， passwd文件的字段分隔符是“：”，因此，必 须 用 -F：来更改默 认 的字段分隔符， 这 个示例中也 涉 及到了内置函数 printf的使用。
awk的 变 量
如同其它程序 设计语 言一 样 ， awk允 许 在程序 语 言中 设 置 变 量，事 实 上，提供 变 量的功能是程序 设计语 言的其本要求，不提供 变 量的程序 设计语 言本人 还 从未 见过 。
awk提供两 种变 量，一 种 是 awk内置的 变 量， 这 前面我 们 已 经讲过 ，需要着重指出的是，与后面提到的其它 变 量不同的是，在 awk程序中引用内置 变 量不需要使用 标 志符 "$"（回 忆 一下前面 讲过 的 NR的使用）。awk提供的另一 种变 量是自定 义变 量。 awk允 许 用 户 在 awk程序 语 句中定 义 并 调 用自已的 变 量。当然 这种变 量不能与内置 变 量及其它 awk保留字相同，在awk中引用自定 义变 量必 须 在它前面加上 标 志符 "$"。与C 语 言不同的是， awk中不需要 对变 量 进 行初始化， awk根据其在awk中第一次出 现 的形式和上下文确定其具体的数据 类 型。当 变 量 类 型不确定 时 ， awk默 认 其 为 字符串 类 型。 这 里有一个技巧：如果你要 让 你的 awk程序知道你所使用的 变 量的明确 类 型，你 应 当在在程序中 给 它 赋 初 值 。在后面的 实 例中，我 们 将用到 这 一技巧。
运算与判断：
作 为 一 种 程序 设计语 言所 应 具有的特点之一， awk支持多 种 运算， 这 些运算与 C 语 言提供的几本相同：如 +、-、*、/、%等等，同 时 ， awk也支持C 语 言中 类 似 ++、--、+=、-=、=+、=-之 类 的功能， 这给 熟悉 C 语 言的使用者 编 写 awk程序 带 来了极大的方便。作 为对 运算功能的一 种扩 展， awk 还 提供了一系列内置的运算函数（如 log、sqr、cos、sin等等）和一些用于 对 字符串 进 行操作（运算）的函数（如 length、substr等等）。 这 些函数的引用大大的提高了 awk的运算功能。
作 为对 条件 转 移指令的一部分， 关 系 判断是 每种 程序 设计语 言都具 备 的功能， awk也不例外。awk中允 许进 行多 种测试 ，如常用的 ==（等于）、！=（不等于）、>（大于）、<（小于）、>=（大于等于）、>=（小于等于）等等，同 时 ，作 为样 式匹配， 还 提供了 ~（匹配于）和！~（不匹配于）判断。
作 为对测试 的一 种扩 充， awk也支持用 逻辑 运算符 :!(非)、&&（与）、||（或）和括号（） 进 行多重判断， 这 大大增 强 了 awk的功能。本文的附 录 中列出了 awk所允 许 的运算、判断以及操作符的 优 先 级 。
awk的流程控制
流程控制 语 句是任何程序 设计语 言都不能缺少的部分。任何好的 语 言都有一些 执 行流程控制的 语 句。 awk提供的完 备 的流程控制 语 句 类 似于 C 语 言， 这给 我 们编 程 带 来了极大的方便。
1、BEGIN和END:
在awk中两个特 别 的表达式， BEGIN和END， 这 两者都可用于 pattern中（参考前面的awk 语 法），提供 BEGIN和END的作用是 给 程序 赋 予初始状 态 和在程序 结 束之后 执 行一些 扫 尾的工作。任何在 BEGIN之后列出的操作（在{}内）将在awk 开 始 扫 描 输 入之前 执 行，而 END之后列出的操作将在 扫 描完全部的 输 入之后 执 行。因此，通 常使用BEGIN来 显 示 变 量和 预 置（初始化） 变 量，使用 END来 输 出最 终结 果。
例：累 计销 售文件 xs中的 销 售金 额 （假 设销 售金 额 在 记录 的第三字段）：
$awk
>'BEGIN { FS=":";print " 统计销 售金 额 ";total=0}
>{print $3;total=total+$3;}
>END {printf " 销 售金 额总计 ： %.2f",total}' sx
（注：>是shell提供的第二提示符，如要在shell程序awk 语 句和 awk 语 言中 换 行， 则 需在行尾加反斜杠 \）
在 这 里， BEGIN 预 置了 内部 变 量 FS（字段分隔符）和自定 义变 量 total,同 时 在 扫 描之前 显 示出 输 出行 头 。而 END 则 在 扫 描完成后打印出 总 合 计 。
2、流程控制 语 句
awk提供了完 备 的流程控制 语 句，其用法与 C 语 言 类 似。下面我 们 一一加以 说 明：
2.1、if...else 语 句 :
格式：
if(表达式)
语 句 1
else
语 句 2
格式中" 语 句 1"可以是多个 语 句，如果你 为 了方便 awk判断也方便你自已 阅读 ，你最好将多个 语 句用 {}括起来。awk分枝 结 构允 许 嵌套，其格式 为 ：
if(表达式1）
{if(表达式2）
语 句 1
else
语 句2
}
语 句 3
else {if(表达式3)
语 句 4
else
语 句 5
}
语 句 6
当然 实际 操作 过 程中你可能不会用到如此 复杂 的分枝 结 构， 这 里只是 为 了 给 出其 样 式 罢 了。
2.2、while 语 句
格式 为 :
while(表达式)
语 句
2.3、do-while 语 句
格式 为 :
do
{
语 句
}while(条件判断 语 句）
2.4、for 语 句
格式 为 ：
for(初始表达式; 终 止条件 ; 步长 表达式 )
{ 语 句 }
在awk的 while、do-while和for 语 句中允 许 使用 break,continue 语 句来控制流程走向，也允 许 使用 exit 这样 的 语 句来退出。 break中断当前正在 执 行的循 环 并跳到循 环 外 执 行下一条 语 句。 continue从当前位置跳到循 环开 始 处执 行。 对 于 exit的 执 行有两 种 情况：当 exit 语 句不在 END中 时 ，任何操作中的 exit命令表 现 得如同到了文件尾，所有模式或操作 执 行将停止， END模式中的操作被 执 行。而出 现 在 END中的exit将 导 致程序 终 止。
例： 为 了
awk中的自定 义 函数
定 义 和 调 用用 户 自己的函数是几乎 每 个高 级语 言都具有的功能， awk也不例外，但原始的awk并不提供函数功能，只有在nawk或 较 新的 awk版本中才可以增加函数。
函数的使用包含两部分：函数的定 义 与函数 调 用。其中函数定 义 又包括要 执 行的代 码 （函数本身）和从主程序代 码传递 到 该 函数的 临时调 用。
awk函数的定 义 方法如下：
function 函数名(参数表){
函数体
}
在gawk中允 许 将 function省略 为 func，但其它版本的awk不允 许 。函数名必 须 是一个合法的 标 志符，参数表中可以不提供参数（但在 调 用函数 时 函数名后的一 对 括号仍然是不可缺少的），也可以提供一个或多个参数。与 C 语 言相似， awk的参数也是通 过值 来 传递 的。
在awk中 调 用函数比 较简单 ，其方法与 C 语 言相似，但 awk比C 语 言更 为 灵活，它不 执 行参数有效性 检查 。 换 句 话说 ，在你 调 用函数 时 ，可以列出比函数 预计 （函数定 义 中 规 定）的多或少的参数，多余的参数会被 awk所忽略，而不足的参数，awk将它 们 置 为 缺省 值 0或空字符串，具体置 为 何 值 ，将取决于参数的使用方式。
awk函数有两 种 返回方式： 隐 式返回和 显 式返回。当 awk 执 行到函数的 结 尾 时 ，它自 动 地返回到 调 用程序， 这 是函数是 隐 式返回的。如果需要在 结 束之前退出函数，可以明确地使用返回 语 句提前退出。方法是在函数中使用形如： return 返回 值 格式的 语 句。
例：下面的例子演示了函数的使用。在 这 个示例中，定 义 了一个名 为 print_header的函数， 该 函数 调 用了两个参数 FileName和PageNum，FileName参数 传给 函数当前使用的文件名， PageNum参数是当前 页 的 页 号。 这 个函数的功能是打印（ 显 示）出当前文件的文件名，和当前 页 的 页 号。完成 这 个功能后， 这 个函数将返回下一 页 的 页 号。
nawk
>'BEGIN{pageno=1;file=FILENAME
>pageno=print_header(file，pageno)；# 调 用函数 print_header
>printf("当前 页页 号是： %d\n",pageno);
>}
>#定 义 函数 print_header
>function print_header(FileName,PageNum){
>printf("%s %d\n",FileName,PageNum); >PageNum++;return PageNUm;
>}
>}' myfile
执 行 这 个程序将 显 示如下内容：
myfile 1
当前 页页 号是： 2
awk高 级输 入 输 出
1. 读 取下一条 记录 ：
awk的next 语 句 导 致awk 读 取下一个 记录 并完成模式匹配，然后立即 执 行相 应 的操作。通常它用匹配的模式 执 行操作中的代 码 。 next 导 致 这 个 记录 的任何 额 外匹配模式被忽略。
2. 简单 地 读 取一条 记录
awk的 getline 语 句用于 简单 地 读 取一条 记录 。如果用 户 有一个数据 记录类 似两个物理 记录 ，那 么 getline将尤其有用。它完成一般字段的分离( 设 置字段 变 量 $0 FNR NF NR)。如果成功 则 返回 1，失 败则 返回 0（到达文件尾）。如果需 简单 地 读 取一个文件， 则 可以 编 写以下代 码 ：
例：示例getline的使用
{while(getline==1)
{
#process the inputted fields
}
}
也可以使getline保存 输 入数据在一个字段中，而不是通 过 使用 getline variable的形式 处 理一般字段。当使用 这种 方式 时 ， NF被置成0，FNR和NR被增 值 。
用 户 也可以使用 getline<"filename"方式从一个 给 定的文件中 输 入数据，而不是从命令行所列内容 输 入数据。此 时 ， getline将完成一般字段分离（ 设 置字段 变 量 $0和NF)。如果文件不存在，返回-1,成功，返回1,返回0表示失 败 。用 户 可以从 给 定文件中 读 取数 据到一个 变 量中，也可以用 stdin( 标 准 输 入 设备 ）或一个包含 这 个文件名的 变 量代替 filename。 值 得注意的是当使用 这种 方式 时 不修改 FNR和NR。
另一 种 使用 getline 语 句的方法是从 UNIX命令接受 输 入，例如下面的例子 :
例：示例从UNIX命令接受 输 入
{while("who -u"|getline)
{
#process each line from the who command
}
}
当然，也可以使用如下形式:
"command" | getline variable
3. 关闭 文件 :
awk中允 许 在程序中 关闭 一个 输 入或 输 出文件，方法是使用 awk的close 语 句。
close("filename")
filename可以是getline打 开 的文件（也可以是 stdin,包含文件名的 变 量或者 getline使用的确切命令）。或一个 输 出文件（可以是 stdout，包含文件名的 变 量或使用管道的确切命令）。
4. 输 出到一个文件 :
awk中允 许 用如下方式将 结 果 输 出到一个文件：
printf("hello word!\n")>"datafile"
或
printf("hello word!\n")>>"datafile"
5. 输 出到一个命令
awk中允 许 用如下方式将 结 果 输 出到一个命令：
printf("hello word!\n")|"sort-t','"
awk与shell script混合 编 程
因 为 awk可以作 为 一个 shell命令使用，因此awk能与shell批 处 理程序很好的融合在一起， 这给实现 awk与shell程序的混合 编 程提供了可能。 实现 混合 编 程的 关键 是 awk与shell script之 间 的 对话 ， 换 言之，就是 awk与shell script之 间 的信息交流 :awk从shell script中 获 取所需的 信息（通常是 变 量的 值 ）、在 awk中 执 行 shell命令行、shell script将命令 执 行的 结 果送 给 awk 处 理以及 shell script 读 取 awk的 执 行 结 果等等。
1.awk 读 取 Shell script程序 变 量
在awk中我 们 可以通 过 “'$ 变 量名 '”的方式 读 取 sell scrpit程序中的 变 量。
例：在下面的示例中，我 们 将 读 取 sell scrpit程序中的 变 量 Name， 该变 量存放的是文本 myfile的撰写者，awk将打印出 这 个人名。
$cat writename
:
# @(#)
#
.
.
.
Name=" 张 三 " nawk 'BEGIN {name="'Name'";\ printf("\t%s\t撰写者%s\n",FILENAME,name");}\
{...}END{...}' myfile
.
.
.
2.将shell命令的 执 行 结 果送 给 awk 处 理
作 为 信息 传 送的一 种 方法，我 们 可以将一条 shell命令的 结 果通 过 管道 线 （ |） 传递给 awk 处 理：
例：示例awk 处 理 shell命令的 执 行 结 果
$who -u | awk '{printf("%s正在 执 行 %s\n",$2,$1)}'
该 命令 将打印出注册 终 端正在 执 行的程序名。
3.shell script程序 读 awk的 执 行 结 果
为 了 实现 shell script程序 读 取 awk 执 行的 结 果，我 们 可以采取一些特殊的方法，例如我 们 可以用 变 量名 =`awk 语 句 `的形式将awk 执 行的 结 果存放入一个 shell script 变 量。当然也可以用管道 线 的方法将 awk 执 行 结 果 传递给 shell script程序 处 理。
例：作 为传 送消息的机制之一， UNIX提供了一个向其所有用 户传 送消息的命令 wall（意思是write to all写 给 所有用 户 ）， 该 命令允 许 向所有工作中的用 户 （ 终 端） 发 送消息。 为 此，我 们 可以通 过 一段 shell批 处 理程序 wall.shell来模 拟这 一程序（事 实 上比 较 老的版本中 wall就是一段shell批 处 理程序：
$cat wall.shell
:
# @(#) wall.shell: 发 送消息 给每 个已注册 终 端
#
cat >/tmp/$$
#用 户录 入消息文本 who -u | awk '{print $2}' | while read tty
do
cat /tmp/$$>$tty
done
在 这 个程序里， awk接受who -u命令的 执 行 结 果， 该 命 令打印出所有已注册 终 端的信息，其中第二个字段是已注册 终 端的 设备 名，因此用 awk命令析出 该设备 名，然后用 while read tty 语 句循 环读 出 这 些文件名到 变 量（ shell script 变 量） tty中，作 为 信息 传 送的 终结 地址。
4.在awk中 执 行 shell命令行----嵌入函数system()
system()是一个不适合字符或数字 类 型的嵌入函数， 该 函数的功能是 处 理作 为 参数 传递给 它的字符串。 system 对这 个参数的 处 理就是将其作 为 命令 处 理，也就是 说 将其当作命令行一 样 加以 执 行。 这 使得用 户 在自己的 awk程序需要 时 可以灵活地 执 行命令或脚本。
例：下面的程序将使用system嵌入函数打印用 户编 制好的 报 表文件， 这 个文件存放在名 为 myreport.txt的文件中。 为简约 起 见 ，我 们 只列出了其 END部分：
.
.
.
END {close("myreport.txt");system("lp myreport.txt");}
在 这 个示例中，我 们 首先使用 close 语 句 关闭 了文件 myreport.txt文件，然后使用system嵌入函数将myreport.txt送入打印机打印。
写到 这 里，我不得不跟朋友 们说 再 见 了， 实 在地 说 ， 这 些内容仍然是 awk的初 步 知 识 ， 电脑 永 远 是前 进 的科学， awk也不例外，本篇所能做的只是在你前行的漫漫 长 途中 铺 平一段小小 开 端，剩下的路 还 得靠你自己去走。老 实说 ，如果本文真能 给 你前行的路上 带 来些 许 的方便，那本人就知足了！
如 对 本篇有任何疑 问 ， 请 E-mail To:Chizlong@yeah.net或到主 页 http://chizling.yeah.net 中留言。
附 录 ：
1.awk的常 规 表达式元字符
\ 换码 序列
^ 在字符串的 开头开 始匹配
$ 在字符串的 结 尾 开 始匹配
. 与任何 单 个字符串匹配
[ABC] 与[]内的任一字符匹配
[A-Ca-c] 与A-C及a-c范 围 内的字符匹配（按字母表 顺 序）
[^ABC] 与除[]内的所有字符以外的任一字符匹配
De sk|Chair 与 De sk和Chair中的任一个匹配
[ABC][DEF] 关联 。与 A、B、C中的任一字符匹配，且其后要跟D、E、F中的任一个字符。
* 与A、B或C中任一个出 现 0次或多次的字符相匹配
+ 与A、B或C中任何一个出 现 1次或多次的字符相匹配
？ 与一个空串或A、B或C在任何一个字符相匹配
（Blue|Black）berry 合并常 规 表达式，与 Blueberry或Blackberry相匹配
2.awk算 术 运算符
运算符 用途
------------------
x^y x的y次 幂
x**y 同上
x%y 计 算 x/y的余数（求模）
x+y x加y
x-y x减y
x*y x乘y
x/y x除y
-y 负 y(y的 开关 符号 );也称一目减
++y y加1后使用y(前置加）
y++ 使用y 值 后加 1（后 缀 加）
--y y减1后使用y(前置减）
y-- 使用后y减1(后 缀 减）
x=y 将y的 值赋给 x
x+=y 将x+y的 值赋给 x
x-=y 将x-y的 值赋给 x
x*=y 将x*y的 值赋给 x
x/=y 将x/y的 值赋给 x x%=y 将x%y的 值赋给 x
x^=y 将x^y的 值赋给 x
x**=y 将x**y的 值赋给 x
3.awk允 许 的 测试 ：
操作符 含 义
x==y x等于y
x!=y x不等于y
x>y x大于y
x>=y x大于或等于y
x<y x小于y
x<=y x小于或等于y?
x~re x匹配正 则 表达式 re?
x!~re x不匹配正 则 表达式 re?
4.awk的操作符(按 优 先 级 升序排列 )
= 、+=、 -=、 *= 、/= 、 %=
||
&&
> >= < <= == != ~ !~
xy (字符串 连结 ， 'x''y' 变 成 "xy"）
+ -
* / %
++ --
5.awk内置 变 量（ 预 定 义变 量）
说 明：表中 v 项 表示第一个支持 变 量的工具（下同）： A=awk，N=nawk,P=POSIX awk,G=gawk
V 变 量 含 义 缺省 值
--------------------------------------------------------
N ARGC 命令行参数个数
G ARGIND 当前被 处 理文件的 ARGV 标 志符
N ARGV 命令行参数数 组
G CONVFMT 数字 转换 格式 %.6g
P ENVIRON UNIX 环 境 变 量
N ERRNO UNIX系 统错误 消息
G FIELDWIDTHS 输 入字段 宽 度的空白分隔字符串
A FILENAME 当前 输 入文件的名字
P FNR 当前 记录 数
A FS 输 入字段分隔符 空格
G IGNORECASE 控制大小写敏感0（大小写敏感）
A NF 当前 记录 中的字段个数
A NR 已 经读 出的 记录 数
A OFMT 数字的 输 出格式 %.6g
A OFS 输 出字段分隔符 空格
A ORS 输 出的 记录 分隔符 新行
A RS 输 入的 记录 他隔符 新行
N RSTART 被匹配函数匹配的字符串首
N RLENGTH 被匹配函数匹配的字符串 长 度
N SUBSEP 下 标 分隔符 "\034"
6.awk的内置函数
V 函数 用途或返回 值
------------------------------------------------
N gsub(reg,string,target) 每 次常 规 表达式 reg匹配 时 替 换 target中的string
N index(search,string) 返回string中search串的位置
A length(string) 求串string中的字符个数
N match(string,reg) 返回常 规 表达式 reg匹配的string中的位置
N printf(format,variable) 格式化 输 出，按 format提供的格式 输 出 变 量 variable。
N split(string,store,delim) 根据分界符delim,分解string 为 store的数 组 元素
N sprintf(format,variable) 返回一个包含基于format的格式化数据，variables是要放到串中的数据
G strftime(format,timestamp) 返回一个基于format的日期或者 时间 串， timestmp是systime()函数返回的 时间
N sub(reg,string,target) 第一次当常 规 表达式 reg匹配，替 换 target串中的字符串
A substr(string,position,len) 返回一个以position 开 始 len个字符的子串
P totower(string) 返回string中 对应 的小写字符
P toupper(string) 返回string中 对应 的大写字符
A atan(x,y) x的余切(弧度)
N cos(x) x的余弦(弧度)
A exp(x) e的x 幂
A int(x) x的整数部分
A log(x) x的自然 对 数 值
N rand() 0-1之 间 的随机数
N sin(x) x的正弦(弧度)
A sqrt(x) x的平方根
A srand(x) 初始化随机数 发 生器。如果忽略 x， 则 使用 system()
G system() 返回自1970年1月1日以来 经过 的 时间 （按秒 计 算）

F rom webpage: http://blogold.chinaunix.net/u/12999/showart_185007.html

